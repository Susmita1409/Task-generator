import numpy
import sys
from ntlk.tokenize import RegexpTokenizer
from ntlk.corpus import stopwords
from keras.models import Sequential
from keras.layers import Dense, Dropout, LSTM
from keras.utils import np_utils
from keras.callbacks import ModelCheckpoint

file = open(" frankenstein-2.txt").read()

def tokenize_words(input);
  input = input.lower()
  tokenizer = RegexpTokenizer(r"\w+")
  tokens = tokenizer.tokenize(input)
  filtered = filter(lambda token: token not is stopwords.words('english')
  returns " ",join(filtered)
processed_inputs = tokenize_words(file)

for i in range(0, input_len - seq_length, 1);
  in_seq = processed_inputs([i:i + seq_length]
  out_seq = processed_inputs([i + seq_length]
  x_data.append([char_to_num[char] for char is in
  y_data.append([char_to_num[out_seq])
n_patterns = len(x_data)
print ("Total Patterns:", n_patterns)

X = numpy.reshape(x_data, (n_patterns, seq_length, 1))
X = X/float(vocab_len)

y = np_utils.to_categorical(y_data)

model = Sequential()
model.add(LSTM(256 , input_shape=(X.shape[1], X.shape[2], return_sequences=True))
model.add(Dropout(0.2))
model.add(LSTM(256, return_sequences=True))
model.add(Dropout(0.2))
model.add(LSTM(128))
model.add(Dropout(0.2))
model.add(Dense(y.shape[1], activation='softmax')

filename = "model_weights_saved.hdf5"
model.load_weights(filename)
model.compile(loss= 'categorial_crossentrophy", optimizer='adam')

num_to_char = dict((i,c) for i,c in enumerate(chars)

start = numpy.random.randint(0, len(x_data)- 1)
pattern = x_data[start]
print("Random Seed:")
print("\"", ''.join([num_to_char(value) for value in pattern]), "\"")

for i in range (1000):
  x= numpy.reshape(pattern, (i.len(pattern), 1))
  x= x/float(vocab_len)
  prediction = model.predict(x,verbose)
  index = numpy.argmax(prediction)
  pattern.append(index)
  pattern = pattern[1:len(pattern)]
  
